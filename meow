#!/bin/bash

# ᓚᘏᗢ

# Name: meow
# Author: Moizuddin Shah
# Date: 22-03-2024
# Description:
#
# This script will print "meow" in the terminal when invoked. The goal is for 
# it to eventually be able to print multiple forms of meow based on a random
# number generator and if possible, also print out random cat emoticons with the
# meows. Also in the future we may add options to only print out the text or 
# only print out the cat graphic.

# Old Test Code
#echo -e "\nᓚᘏᗢ meow\n"
#echo -e  "\n  へ\n（• ˕ •マ meow\n"

# Tell getopt what your short (stuff after "-o") and long (stuff after "--long")
# options are. If the option requires an input/value then add a : to it and then
# continue with the rest of the options. You also tell it to not count anything
# after the getopt command itself generates a "--" as an option. And to treat
# all that text as non-options
if ! options=$(getopt -o -hlvV --long help,large,version,void,freeman,shirley -- "$@")
then
	# Error, getopt will print out a message for us
	exit 1
fi


# Version String
version="3.2.0"

# Help function/string
Help()
{
	echo "ᓚᘏᗢ"
	echo "Print some variation of \"meow\" onomatopeia alongside an emoticon"
	echo "of a cat in the terminal when invoked. Text and emoticon" 
	echo "are randomly selected."
	echo
	echo "Syntax: meow [--freeman | {-h | --help} | {-l | large} | --shirley | {-v | --void} | {-V | --version}]"
	echo "options:"
	echo "--freeman"
	echo -e "\tDisplay ASCII art of Freeman and exit."
	echo "-h, --help"
	echo -e "\tPrint this help and exit."
	echo "-l, --large"
	echo -e "\tDisplay a random, large ASCII art of a cat and exit."
	echo "--shirley"
	echo -e "\tDisplay ASCII art of Shirley and exit."
	echo "-v, --void"
	echo -e "\tDisplay ASCII art of a silly black cat and exit." 
	echo "-V, --version"
	echo -e "\tPrint the software version and exit." 
	echo
}

# Print ASCII art of a cat from a file
largeCat()
{
	fileNum=$(((1 + $RANDOM % 12)-1))
	cat "$HOME/bin/cat_ASCII_art/large_cat_${fileNum}"
}

void()
{
	cat "$HOME/bin/cat_ASCII_art/void_cat_blepV2-ascii-art.txt"
}

freeman()
{
	cat "$HOME/bin/cat_ASCII_art/bg_freeman-ascii-art.txt"
}

shirley()
{
	cat "$HOME/bin/cat_ASCII_art/bg_shad_shirley-ascii-art.txt"
}

# Main script function
Main()
{
	# Arrays to hold cat emotes and meow variants
	catSprites=("ᓚᘏᗢ" "  へ\n（• ˕ •マ" "ᓚ₍ ^. .^₎" "ฅ^•ﻌ•^ฅ" ">^•-•^<") 
	meowVar=("meow" "miaow" "nyan" "mew" "maow" "miau")

	# Random Num Generation for cat emote and meow selection
	catNum=$(((1 + $RANDOM % 5)-1))
	meowNum=$(((1 + $RANDOM % 6)-1))

	echo -e "\n${catSprites[catNum]} ${meowVar[meowNum]}\n"
}

# Positional parameters are set to the arguments from $options that getopt
# split up
set -- $options

# As long as there is a argument to evaluate from the above $options
while true; 
do
	# Consume the next (what the terminal will see as 1st) argument
	# Look within obsidian notes for more explanation
	case "$1" in
		--freeman)
			freeman
			exit;;
		-h|--help)
			Help
			exit;;
		-l|--large)
			largeCat
			exit;;
		--shirley)
			shirley
			exit;;
		-v|--void) 
			void
			exit;; 
		-V|--version)
			echo -e "Version: ${version}"
			exit;;
		(--)
			shift; 
			break;;
		(-*)
			# Print an error with the name of the script and what
			# the unrecognized option was
			echo "$0: error - unrecognized option $1" 1>&2;
			exit;;			
		(*)
			break;;
	esac
	
	# Fetch the next argument and make it the 1st AKA $1
	shift
done

Main
